# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- develop
- feature/*
- release/*

pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: Build
  displayName: Build application
  jobs:
  - job: Build
    displayName: Nodejs Build
    steps:
    - task: Npm@1
      displayName: npm install
      inputs:
        command: 'install'
        workingDir: 'src'
    - task: Npm@1
      displayName: npm test
      inputs:
        command: 'custom'
        workingDir: 'src'
        customCommand: 'test'
- stage: Vulnerability
  displayName: Scan vulnerability application
  jobs:
  - job: Npm_Vulnerability
    displayName: Npm Vulnerability
    steps:
    - task: Npm@1
      displayName: npm install
      inputs:
        command: 'install'
        workingDir: 'src'
    - task: Npm@1
      displayName: npm audit
      inputs:
        command: 'custom'
        workingDir: 'src'
        customCommand: 'audit'
  - job: WhiteSource_Vulnerability
    displayName: WhiteSource Vulnerability
    steps:
    - task: WhiteSource@20
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'
        projectName: 'devsecops'

- stage: Code_Quality
  displayName: Scan Code Quality
  jobs:
  - job: Sonar
    displayName: Sonar
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonarcloud'
        organization: 'vinhtuanpham'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'vinhtuanpham'
        cliProjectName: 'devsecops'
        cliSources: 'src'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.coverage.exclusions = "**/test/","**/server.js"

    - task: SonarCloudAnalyze@1

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
- stage: Docker
  displayName: Build application container
  jobs:
  - job: Build
    displayName: Build Docker
    steps:
    - script: sudo pip install anchorecli
      displayName: Install Anchore CLI 
    - script: export PATH="$HOME/.local/bin/:$PATH"
      displayName: Set Path
    - script: anchore-cli --url='http://52.165.239.212:8228/v1' --u='admin' --p='foobar' image list
      displayName: test anchore
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'vinhpt90/devsecops'
        command: 'buildAndPush'
        Dockerfile: 'src/Dockerfile'
        tags: '$(Build.SourceBranchName).$(Build.BuildId)'
    
    # - task: AnchoreTask@1
    #   inputs:
    #     engineUrl: 'http://52.165.239.212:8228/v1'
    #     engineUser: 'admin'
    #     enginePassword: 'foobar'
    #     imageName: 'index.docker.io/vinhpt90/devsecops:$(Build.SourceBranchName).$(Build.BuildId)'
    #     doVulnScan: true

    - script: anchore-cli --url='http://52.165.239.212:8228/v1' --u='admin' --p='foobar' image vuln index.docker.io/vinhpt90/devsecops:master.69 os
      displayName: vulnerability report
    
    # - script: anchore-cli --url='http://52.165.239.212:8228/v1' --u='admin' --p='foobar' evaluate check index.docker.io/vinhpt90/devsecops:$(Build.SourceBranchName).$(Build.BuildId) --detail
    #   displayName: policy evaluation report
    
    # - script: anchore-cli --url='http://52.165.239.212:8228/v1' --u='admin' --p='foobar' image content index.docker.io/vinhpt90/devsecops:$(Build.SourceBranchName).$(Build.BuildId) os
    #   displayName: system packages report


